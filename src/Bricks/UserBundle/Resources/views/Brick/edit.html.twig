{% extends "BricksUserBundle::layout.html.twig" %}

{% import "BricksSiteBundle::macros/macrosInfo.html.twig" as macrosInfo %}

{% block main %}

    <div class="row">
        <div class="span12">
            <form action="{{ (entity.isNew) ? path('user_brick_create') : path('user_brick_update', { 'id': entity.id }) }}" method="post" {{ form_enctype(form) }} id="user-brick-edit" class="form form-horizontal" novalidate>

                <p>
                    <div class="pull-right">
                    <button type="submit" class="btn btn-success">
                        <i class="icon-ok"></i> {{ 'save'|trans|capitalize }}
                    </button>
                    <a href="{{ path('user_brick') }}" class="btn">
                        <i class="icon-chevron-left"></i> {{ 'back_to_the_list'|trans|capitalize }}
                    </a>
                    </div>
                    
                    <h1>{{ (entity.isNew) ? 'brick.create_new_brick'|trans({}, 'UserBundle'): 'brick.edit_brick'|trans({}, 'UserBundle') }}</h1>
                </p>
                
                <br>
                
                {% if form_errors(form) %}
                    <div class="form-errors">
                        {{ form_errors(form) }}
                    </div>
                {% endif %}

                <div class="control-group">
                    {# info modal #}
                    <div class="control-label pull-right" for="{{ form.title.vars.id }}">
                        {{ macrosInfo.bootstrapInfoModal('brick.help.title.title'|trans({}, 'UserBundle'), 'brick.help.title.body'|trans({}, 'UserBundle')) }}
                    </div>

                    {# label #}
                    <div class="control-label" for="{{ form.title.vars.id }}">
                        {{ 'brick.title'|trans({}, 'UserBundle')|capitalize }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.title) }}
                    </div>
                </div>

                <div class="control-group">
                    {# info modal #}
                    <div class="control-label pull-right" for="{{ form.brick_license.vars.id }}">
                        {{ macrosInfo.bootstrapInfoModal('brick.help.license.title'|trans({}, 'UserBundle'), 'brick.help.license.body'|trans({}, 'UserBundle')) }}
                    </div>

                    {# label #}
                    <div class="control-label" for="{{ form.brick_license.vars.id }}">
                        {{ 'brick.license'|trans({}, 'UserBundle')|capitalize }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.brick_license) }}
                    </div>
                </div>
                
                <div class="control-group">
                    {# info modal #}
                    <div class="control-label pull-right" for="{{ form.brickHasTags.vars.id }}">
                        {{ macrosInfo.bootstrapInfoModal('brick.help.tags.title'|trans({}, 'UserBundle'), 'brick.help.tags.body'|trans({}, 'UserBundle')) }}
                    </div>
                    
                    {# label #}
                    <div class="control-label" for="{{ form.brickHasTags.vars.id }}">
                        {{ 'brick.tags'|trans({}, 'UserBundle')|capitalize }}
                    </div>
                    <div class="controls">
                    
                        <div id="tags-labels" class="tag-list">
                            <div class="tags"></div>
                            <p id="tags-labels-help-text">
                                {{ 'brick.brickHasTags.help_text'|trans({}, 'UserBundle') }}
                            </p>
                        </div>
                        
                        
                        {{ form_widget(form.brickHasTags) }}
                    </div>
                </div>
                
                <div class="control-group">
                    {# info modal #}
                    <div class="control-label pull-right" for="{{ form.description.vars.id }}">
                        {{ macrosInfo.bootstrapInfoModal('brick.help.description.title'|trans({}, 'UserBundle'), 'brick.help.description.body'|trans({}, 'UserBundle')) }}
                    </div>
                    
                    {# label #}
                    <div class="control-label" for="{{ form.description.vars.id }}">
                        {{ 'brick.description'|trans({}, 'UserBundle')|capitalize }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.description) }}
                    </div>
                </div>
                
                <div class="control-group">
                    {# info modal #}
                    <div class="control-label pull-right" for="{{ form.canonical_url.vars.id }}">
                        {{ macrosInfo.bootstrapInfoModal('brick.help.canonical_url.title'|trans({}, 'UserBundle'), 'brick.help.canonical_url.body'|trans({}, 'UserBundle')) }}
                    </div>
                    
                    {# label #}
                    <div class="control-label" for="{{ form.canonical_url.vars.id }}">
                        {{ 'brick.canonical_url'|trans({}, 'UserBundle')|capitalize }}
                    </div>
                    <div class="controls">
                        {{ form_widget(form.canonical_url) }}
                    </div>
                </div>
                
                <div id="control-group-content" class="control-group">
                    <div class="controls">
                        <ul class="nav nav-tabs" id="content-tab">
                            <li class="active">
                                <a href="#content-code" data-toggle="tab">
                                    {{ 'brick.content'|trans({}, 'UserBundle')|capitalize }}
                                </a>
                            </li>
                            <li>
                                <a href="#content-preview" data-toggle="tab">
                                    {{ 'brick.preview'|trans({}, 'UserBundle')|capitalize }}
                                </a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="content-code">
                                {{ form_widget(form.content) }}
                            </div>
                            <div class="tab-pane" id="content-preview"></div>
                        </div>
                    </div>
                </div>
                
                <div class="control-group">
                    <div class="controls">
                        <button type="submit" class="btn btn-success">
                            <i class="icon-ok"></i> {{ 'save'|trans|capitalize }}
                        </button>
                        <a href="{{ path('user_brick') }}" class="btn">
                            <i class="icon-chevron-left"></i> {{ 'back_to_the_list'|trans|capitalize }}
                        </a>
                    </div>
                </div>
                
                {{ form_rest(form) }}
                
            </form>
            
        </div>
    </div>

{% endblock %}

{% block javascripts_footer %}

    <script type="text/javascript">
        jQuery(function($) {
        	/****************************************************************************************
             * tabbed panes for Brick content/preview
             ***************************************************************************************/
            /**
             * preview the content of the brick by calling the markup parser via ajax
             */
            $('a[data-toggle="tab"]').on('shown', function (e) {
                
                // tab element pressed
                var tabCaller = $(e.target);

                // tab pane related
                var paneTarget = $(tabCaller.attr('href'));

                // if preview is requested
                if (tabCaller.attr('href') == '#content-preview') {

                    /**
                     * perform ajax call to preview content
                     */
                	$.ajax({
                	    url: "{{ path('_user_brick_renderMarkdown') }}",
                	    data: {
            	            'content': $('#content-code textarea').val()
        	            },
        	            type: 'POST',
        	            beforeSend: function(e) {
        	            	$('#content-preview').html('loading preview...');
                        },
        	            complete: function(e) {
        	            	$('#content-preview').html(e.responseText);
                        }
            		})
                }
            })

            /****************************************************************************************
             * Tag management
             ***************************************************************************************/
            var tagsElement = $('#tags-labels');
            
            /**
             * updates the form.brickHasTags form field when user adds/removes tags
             * through the bootstrap plugin
             *
             * hack: everything is wrapped in a timeout function,
             * waiting for https://github.com/maxwells/bootstrap-tags/issues/2
             */
            updateBrickHasTagsInput = function() {

                setTimeout(function() {
            	    /**
                     * wrap everything in a timeout function
                     */
                    // form.brickHasTags form field
                    var brickHasTagsInput = $("#{{ form.brickHasTags.vars.id }}");
    
                    /**
                     * get all tags values
                     *
                     * waiting for https://github.com/maxwells/bootstrap-tags/issues/3
                     */
                    var tags = tagsElement.tags().getTags();
                    
                    // set tags values to brick form input
                    $("#{{ form.brickHasTags.vars.id }}").val(tags.join("|"));
                }, 400);
            };


            // tags values for bootstrap plugin
            {% if (entity.brickHasTags|length > 0) %}
                tagData = "{{ form.brickHasTags.vars.value }}".split('|');
            {% else %}
                tagData = [];
            {% endif %}

            /**
             * initialize tags box with bootstrap-tags jquery plugin
             * https://github.com/maxwells/bootstrap-tags
             */
            tagsElement.tags( {
                tagData: tagData,
                tagClass: "btn btn-mini",
                
                pressedReturn: function(e) {
                    e.preventDefault();
                },
                whenAddingTag: function (tag) {
                	updateBrickHasTagsInput();
                },
                tagRemoved: function () {
                	updateBrickHasTagsInput();
                }
            });

        });
    </script>
    
{% endblock %}
